generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                @id @default(cuid())
  email             String                @unique
  createdAt         DateTime              @default(now())
  firstName         String?
  isActive          Boolean               @default(true)
  lastName          String?
  password          String
  role              UserRole              @default(PLAYER)
  updatedAt         DateTime              @updatedAt
  bestFindMemory    String?
  degrees           String[]
  education         String[]
  favoritePlayZones String[]
  hobbies           String[]
  homeCity          String?
  profilePicture    String?
  statusMessage     String?
  workHistory       String[]
  gamerTag          String?               @unique
  agreedToPrivacy   Boolean               @default(false)
  agreedToTerms     Boolean               @default(false)
  country           String?
  dateOfBirth       DateTime?
  isPaidUser        Boolean               @default(false)
  privacyVersion    String?
  state             String?
  termsVersion      String?
  badges            Badge[]
  chatPosts         ChatPost[]
  clueFindings      ClueFinding[]
  cluePhotos        CluePhoto[]           @relation("CluePhotoUploader")
  createdGames      Game[]                @relation("GameCreator")
  gamePhotos        GamePhoto[]           @relation("GamePhotoUploader")
  loginAttempts     LoginAttempt[]
  pageViews         PageView[]
  playerGames       PlayerGame[]
  profileData       ProfileData[]
  referredBy        Referral[]            @relation("Referred")
  referrals         Referral[]            @relation("Referrer")
  followers         SocialConnection[]    @relation("Follower")
  following         SocialConnection[]    @relation("Following")
  surveyResponses   SurveyResponse[]
  teamMemberships   TeamMember[]
  treatments        TreatmentAssignment[]
}

model Game {
  id                      String              @id @default(cuid())
  name                    String
  description             String?
  status                  GameStatus          @default(DRAFT)
  startDate               DateTime
  endDate                 DateTime?
  isOngoing               Boolean             @default(false)
  clueReleaseSchedule     ClueReleaseSchedule @default(ALL_AT_ONCE)
  customReleaseTimes      Json?
  baseCluePoints          Int                 @default(100)
  timeDiscountType        TimeDiscountType    @default(NONE)
  timeDiscountRate        Float               @default(0.0)
  profileCompletionPoints Int                 @default(50)
  referralPoints          Int                 @default(25)
  followerPoints          Int                 @default(10)
  privacyBonusPoints      Json?
  createdBy               String
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  pointTrackingMode       PointTrackingMode   @default(HISTORICAL)
  gameCenterLat           Float?
  gameCenterLng           Float?
  gameCenterAddress       String?
  maxPlayers              Int                 @default(10000000)
  chatPosts               ChatPost[]
  clueGamePhotos          CluePhoto[]         @relation("ClueGamePhotos")
  creator                 User                @relation("GameCreator", fields: [createdBy], references: [id])
  gameClues               GameClue[]
  gamePhotos              GamePhoto[]         @relation("GamePhotos")
  surveys                 GameSurvey[]
  treatments              GameTreatment[]
  playerGames             PlayerGame[]
  prizes                  Prize[]
  teams                   Team[]
}

model ClueLocation {
  id                    String      @id @default(cuid())
  identifyingName       String
  anonymizedName        String
  latitude              Float
  longitude             Float
  text                  String
  hint                  String?
  gpsVerificationRadius Float       @default(1.5)
  requiresSelfie        Boolean     @default(true)
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  cluePhotos            CluePhoto[] @relation("CluePhotos")
  gameClues             GameClue[]
}

model GameClue {
  id             String        @id @default(cuid())
  gameId         String
  clueLocationId String
  customName     String?
  customText     String?
  customHint     String?
  points         Int           @default(100)
  releaseTime    DateTime?
  isReleased     Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  findings       ClueFinding[]
  clueLocation   ClueLocation  @relation(fields: [clueLocationId], references: [id], onDelete: Cascade)
  game           Game          @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([gameId, clueLocationId])
}

model PlayerGame {
  id           String       @id @default(cuid())
  userId       String
  gameId       String
  isActive     Boolean      @default(true)
  joinedAt     DateTime     @default(now())
  leftAt       DateTime?
  totalPoints  Int          @default(0)
  privacyLevel PrivacyLevel @default(PRIVATE)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  game         Game         @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, gameId])
}

model GamePhoto {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  description  String?
  isGameCenter Boolean  @default(false)
  isFavorited  Boolean  @default(false)
  uploadedBy   String
  gameId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  game         Game     @relation("GamePhotos", fields: [gameId], references: [id], onDelete: Cascade)
  uploader     User     @relation("GamePhotoUploader", fields: [uploadedBy], references: [id])
}

model CluePhoto {
  id             String       @id @default(cuid())
  filename       String
  originalName   String
  description    String?
  isCluePhoto    Boolean      @default(false)
  isFavorited    Boolean      @default(false)
  uploadedBy     String
  clueLocationId String
  gameId         String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  clueLocation   ClueLocation @relation("CluePhotos", fields: [clueLocationId], references: [id], onDelete: Cascade)
  game           Game?        @relation("ClueGamePhotos", fields: [gameId], references: [id], onDelete: Cascade)
  uploader       User         @relation("CluePhotoUploader", fields: [uploadedBy], references: [id])
}

model ClueFinding {
  id           String   @id @default(cuid())
  userId       String
  foundAt      DateTime @default(now())
  points       Int
  createdAt    DateTime @default(now())
  gameClueId   String
  gpsLatitude  Float
  gpsLongitude Float
  selfiePhoto  String?
  shareFind    Boolean  @default(false)
  sharePhoto   Boolean  @default(false)
  gameClue     GameClue @relation(fields: [gameClueId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, gameClueId])
}

model Prize {
  id           String            @id @default(cuid())
  gameId       String
  name         String
  description  String?
  type         PrizeType
  distribution PrizeDistribution
  value        String?
  frequency    String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  delivery     PrizeDelivery     @default(ELECTRONIC)
  game         Game              @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model Referral {
  id         String   @id @default(cuid())
  referrerId String
  referredId String
  isActive   Boolean  @default(true)
  points     Int      @default(25)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  referred   User     @relation("Referred", fields: [referredId], references: [id], onDelete: Cascade)
  referrer   User     @relation("Referrer", fields: [referrerId], references: [id], onDelete: Cascade)

  @@unique([referrerId, referredId])
}

model SocialConnection {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  isActive    Boolean  @default(true)
  points      Int      @default(10)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model ChatPost {
  id        String    @id @default(cuid())
  gameId    String
  userId    String
  content   String
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
  deletedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  game      Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProfileData {
  id               String   @id @default(cuid())
  userId           String
  phoneNumber      String?
  homeAddress      String?
  education        String?
  highSchool       String?
  college          String?
  shoppingPatterns String?
  points           Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Survey {
  id          String           @id @default(cuid())
  name        String
  description String?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  gameSurveys GameSurvey[]
  questions   SurveyQuestion[]
}

model SurveyQuestion {
  id           String           @id @default(cuid())
  surveyId     String
  question     String
  type         QuestionType
  pointScaleId String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  pointScale   PointScale       @relation(fields: [pointScaleId], references: [id])
  survey       Survey           @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  responses    SurveyResponse[]
}

model PointScale {
  id          String           @id @default(cuid())
  name        String
  description String?
  options     Json
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  questions   SurveyQuestion[]
}

model GameSurvey {
  id        String           @id @default(cuid())
  gameId    String
  surveyId  String
  isActive  Boolean          @default(true)
  points    Int              @default(10)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  game      Game             @relation(fields: [gameId], references: [id], onDelete: Cascade)
  survey    Survey           @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  responses SurveyResponse[]

  @@unique([gameId, surveyId])
}

model SurveyResponse {
  id           String         @id @default(cuid())
  userId       String
  answer       String
  points       Int            @default(0)
  createdAt    DateTime       @default(now())
  gameSurveyId String
  questionId   String
  gameSurvey   GameSurvey     @relation(fields: [gameSurveyId], references: [id], onDelete: Cascade)
  question     SurveyQuestion @relation(fields: [questionId], references: [id])
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id          String       @id @default(cuid())
  name        String
  description String?
  isActive    Boolean      @default(true)
  isCrossGame Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  gameId      String?
  game        Game?        @relation(fields: [gameId], references: [id])
  members     TeamMember[]
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      String   @default("member")
  joinedAt  DateTime @default(now())
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String?
  icon        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Treatment {
  id             String          @id @default(cuid())
  name           String
  description    String
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  gameTreatments GameTreatment[]
}

model GameTreatment {
  id             String                  @id @default(cuid())
  gameId         String
  treatmentId    String
  assignmentType TreatmentAssignmentType @default(RANDOM)
  isActive       Boolean                 @default(true)
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  game           Game                    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  treatment      Treatment               @relation(fields: [treatmentId], references: [id])
  assignments    TreatmentAssignment[]

  @@unique([gameId, treatmentId])
}

model TreatmentAssignment {
  id              String        @id @default(cuid())
  userId          String
  gameTreatmentId String
  assignedAt      DateTime      @default(now())
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  gameTreatment   GameTreatment @relation(fields: [gameTreatmentId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, gameTreatmentId])
}

model LoginAttempt {
  id             String   @id @default(cuid())
  userId         String?
  email          String
  password       String
  success        Boolean
  ipAddress      String?
  userAgent      String?
  browser        String?
  browserVersion String?
  os             String?
  osVersion      String?
  deviceType     String?
  deviceModel    String?
  country        String?
  region         String?
  city           String?
  attemptedAt    DateTime @default(now())
  createdAt      DateTime @default(now())
  user           User?    @relation(fields: [userId], references: [id])

  @@index([email])
  @@index([ipAddress])
  @@index([attemptedAt])
  @@index([success])
}

model PageView {
  id             String   @id @default(cuid())
  userId         String?
  pageName       String
  pageUrl        String
  pageTitle      String?
  referrer       String?
  ipAddress      String?
  userAgent      String?
  browser        String?
  browserVersion String?
  os             String?
  osVersion      String?
  deviceType     String?
  deviceModel    String?
  country        String?
  region         String?
  city           String?
  sessionId      String?
  viewedAt       DateTime @default(now())
  createdAt      DateTime @default(now())
  user           User?    @relation(fields: [userId], references: [id])

  @@index([pageName])
  @@index([userId])
  @@index([ipAddress])
  @@index([viewedAt])
  @@index([sessionId])
}

enum UserRole {
  ADMIN
  GAME_MASTER
  PLAYER
}

enum GameStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum ClueReleaseSchedule {
  ALL_AT_ONCE
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

enum TimeDiscountType {
  NONE
  LINEAR
  CURVE_LINEAR
}

enum PrivacyLevel {
  PRIVATE
  MINIONS_ONLY
  MINIONS_AND_FRENEMIES
  PUBLIC
}

enum PrizeType {
  OVERALL_GAME
  DAILY
  WEEKLY
}

enum PrizeDistribution {
  TOP_PLAYERS
  RANDOM_LOTTERY
}

enum PrizeDelivery {
  IN_PERSON
  ELECTRONIC
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum PointTrackingMode {
  HISTORICAL
  REAL_TIME
}

enum TreatmentAssignmentType {
  RANDOM
  MANUAL
  AUTO_FUTURE
}
